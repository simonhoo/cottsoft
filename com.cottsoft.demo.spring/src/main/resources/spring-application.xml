<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!-- 使用类的构造器来实例化. -->
	<!-- 1. lazy-init="true|false" : true只到调用getBean时才会实例化,false是一启动实例化，默认为false 
		 2. 要为整个配置件文件下的bean统一指定是否延时初时化，在beans 后面加default-lazy-init="treu|false" 
		 3. scope="prototype" : 每次调用getBean都产生一个新的实例，默认为单例。在JAVA WEB中，还可以指定request,sesson等。 
		 4. init-method="init" : 指定实例化之后的初始化方法。
		 5. destroy-method="destory" 指定对象销毁前调用的关闭资源的方法。 
		 6. 依赖注入(IoC) 只定义要实例化的对象，并不实例化，但提供get和set方法。 在配置文件中，先配置要实例化的bean, 现在补实例化的bean中配置IoC. 
		<property /> name: 定义的要实例化的变量，ref：要实例化的bean名字。 
	-->
	<bean id="oracleDao" name="oracleDao"
		class="com.cottsoft.lib.spring.test.dao.impl.OracleDao"></bean>
	<bean id="hibernateDao" name="hibernateDao"
		class="com.cottsoft.lib.spring.test.dao.impl.HibernateDao"></bean>
	<bean id="daoBean" name="daoBean" class="com.cottsoft.lib.spring.test.biz.DaoBean">
		<property name="oracleDao" ref="oracleDao"></property>
		<property name="hibernateDao" ref="hibernateDao"></property>
		<!--注入其它参数 Set -->
		<property name="userSet">
			<set>
				<value>张三</value>
				<value>李四</value>
				<value>王五</value>
				<value>赵六</value>
			</set>
		</property>
		<!--注入其它参数 List -->
		<property name="productList">
			<list>
				<value>iPad</value>
				<value>Xoom</value>
				<value>乐Pad</value>
			</list>
		</property>
		<!--注入其它参数 Properties -->
		<property name="userInfo">
			<props>
				<prop key="simon">13923881013</prop>
				<prop key="sunny">13800080009</prop>
				<prop key="lina">0755-26668888</prop>
			</props>
		</property>
	</bean>

	<bean id="springTestBiz" name="springTestBiz"
		class="com.cottsoft.lib.spring.test.biz.impl.ProductBizImpl"
		lazy-init="false" scope="prototype" init-method="init" destroy-method="destory">
		<!-- IoC 依赖注入 =======用stter方式 1, 注入外部bean, 外部bean 可以补其它的 bean使用. 用ref的方式 
			2, 采用内部bean, 这个内部bean不能被其它的bean使用，相当于私有的。 -->
		<!--1,注入外部bean -->
		<property name="daoBean" ref="daoBean"></property>
		<!--2,采用内部bean <property name="daoBean"> <bean class="com.cottsoft.lib.spring.test.biz.DaoBean"></bean> 
			</property> -->
	</bean>





	<!-- 每次都重新实例化 -->
	<bean id="springTestDaoPrototype" name="springTestDaoPrototype"
		class="com.cottsoft.lib.spring.test.dao.impl.OracleDao" scope="prototype">
	</bean>
	
	<bean id="springTestBizPrototype" name="springTestBizPrototype"
		class="com.cottsoft.lib.spring.test.biz.impl.ProductBizImpl" scope="prototype">
	</bean>


	<!--另外两种实例化方法 -->
	<!-- 使用静态工厂方法来实例化. -->
	<bean id="springTestByFactoryDao" name="springTestByFactoryDao"
		class="com.cottsoft.lib.spring.bean.factory.SpringBeanFactory"
		factory-method="instanceDaoBean">
	</bean>

	<bean id="springTestByFactoryBiz" name="springTestByFactoryBiz"
		class="com.cottsoft.lib.spring.bean.factory.SpringBeanFactory"
		factory-method="instanceBizBean">
	</bean>


	<!-- 使用实例工厂的方示来实例化. -->
	<bean id="springBeanFactory" class="com.cottsoft.lib.spring.bean.factory.SpringBeanFactory" />

	<bean id="springTestByInstanceFactoryDao" factory-bean="springBeanFactory"
		factory-method="getDaoBean">
	</bean>

	<bean id="springTestByInstanceFactoryBiz" factory-bean="springBeanFactory"
		factory-method="getBizBean">
	</bean>

</beans>